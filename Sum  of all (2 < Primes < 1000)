# -*- coding: utf-8 -*-
"""
Created on Wed Aug 24 13:25:10 2022

@author: vixey foxwish
"""
# Textbook titled Introduction to Computation and Programming Using Python
# Used in MIT OCW 6.0001 Introduction to Computer Science and Programming in Python
# "Finger exercises" are proposed problems in the text with no solution shared
# Chapter 2 Section 6
# 2.6 For Loops and Range, p.40 Finger Exercise

# Write a program that prints the sum of the prime numbers greater than 2 and
# less than 1000. Hint: you probably want to use a for loop that is a 
# primality test nested inside a for loop that iterates over the odd integers
# between 3 and 999. 

# Odd numbers 3 to 999 are 2(n)+1 where n = 1 to 499 (so max = 500 for range)
sum = 0
max = 500
# Can try max of 10 to sum the primes 3+5+7+11+13+17+19 = 75 for a small value 
# where the test case is easily viewable in its entirety when adding 
# print statements throughout the program to watch all its inner workings
# Online searches confirm 76,125 is the sum of all primes greater than 2 and 
# less than 1000

for n in range(1,max):
    # Generates all odd numbers from 3 to (2*max - 1) using n = 1 to n = (max - 1)
    # 2n + 1 is the odd number that we want to test to see if 2n + 1 is a prime
    odd = int(2*n + 1)
    valid = 0
  
    for x in range(1,max):
        divisor = 2*x + 1
    # This code attempts to divide the odd number 2n + 1 by every odd number >= 3
    # that is less than it, with 2x + 1 generating these divisors
    # Only a prime odd number 2n + 1 cannot be divided by any smaller odd number >= 3
    # to yield a zero remainder
    
        if odd%divisor != 0 and divisor < odd:
            # If this odd number 2n + 1 leaves a nonzero remainder when divided
            # by the smaller odd number 2x + 1, it could turn out to be prime.
            # Each time this divisibility test fails, valid is increased by one.
            valid += 1
            
        elif odd%divisor == 0 and divisor < odd:
            # If this odd number 2n + 1 leaves a zero remainder when divided
            # by the smaller odd divisor 2x + 1, then 2n + 1 is composite.
            # Time to break out to the prime testing for loop: this odd is not prime.
            break
        
    # If 2n + 1 cannot be divided by any odd divisor >= 3 (2x + 1) that's less than itself 
    # Then the "valid" count will reflect how every odd number >= 3 and less than 
    # itself would not be a factor of it, so it is prime, and the valid + 1 and
    # x numbers will reach this relationship of parity ONLY for primes.      
        if valid + 1 == x:
            sum = sum + odd         
print(sum)
